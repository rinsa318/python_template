name: python-template
services:
  core:
    build:
      # --------------------------------------------------------------------
      # --> シェル環境変数/環境変数ファイル/dockerfileいずれにも存在せず、
      #     dockerfile中で必要な変数はここで追記記入が必要
      # --------------------------------------------------------------------
      args:
        DEPLOY_TARGET: ${DEPLOY_TARGET}
        PYTHON_VERSION: ${PYTHON_VERSION}
        UV_VERSION: ${UV_VERSION}
        UV_PROJECT_ENVIRONMENT_PATH: ${UV_PROJECT_ENVIRONMENT_PATH} 
        # ARG_NOT_PRESENT_IN_ENVFILE_SHELL_DOCKERFILE: "xxxxx"
      context: ../../
      dockerfile: environments/dev/Dockerfile.nvidia
    # --------------------------------------------------------------------
    # [Note]
    # 複数のファイルで同じ環境変数がある場合、docker composeは以下優先度で使用する。
    # そのためcompose.yamlを直接書き換えたり、miseで.envの読み込みをやめ、
    # 別途シェル環境変数を設定したりする場合はその値が優先される。
    # [優先度]
    # 1. Composeファイル
    # 2. シェル環境変数 --> 環境変数をコンテナ内に通す必要あり
    # （https://docs.docker.jp/v20.10/compose/environment-variables.html#pass-environment-variables-to-containers）
    # 3. 環境変数ファイル
    # 4. Dockerfile
    # 5. 変数が定義されていない
    # --------------------------------------------------------------------
    # environment:
    #   - XXXX=xxxxx
    env_file:
      - ../../.env
    tty: true
    volumes:
      - type: bind
        source: ../../
        target: /app
    # ホスト側のフォルダを一部除外したい場合は、以下のように設定の追記が必要
    # 例）.venvを除外したいとき
      - type: volume
        source: exclude
        target: /app/.venv
    # GPU使用時
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              # device_ids: ["0", "3"]
              capabilities: [ gpu ]
    # コマンド設定時
    command:
      - /bin/bash
      - -c
      - |
        echo 'Command 1'
        i=0; while [ $((i)) -ne 5 ]; do echo 'Command 2'; i=$((i+1)); done
        echo 'Command 3'
        while true; do echo 'Command 4'; done
volumes:
  exclude:
